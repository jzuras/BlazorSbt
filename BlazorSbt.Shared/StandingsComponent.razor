@using BlazorSbt
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<BlazorSbt.Shared.Data.DivisionContext> DbFactory

Header Component Goes Here
<!--
<vc:Header sub-heading="Divisions" />
-->

<!--
<div class="standings-table">
    This component is defined in the <strong>BlazorSbt.Shared</strong> library - standings component.
</div>

<div class="standings-table">
    so is this one.
</div>

<Component1 />

<span class="table">
    as is this one.
</span>
-->

<!--
<div> is needed to wrap a child component to allow css isolation to work on it.
    note that I had to use Align as the text-center css style did not work.
    I had to use !important on padding in css file to override quickgrid's default theme.
-->
<div>
<QuickGrid Class="table" Items="@Standings" >
    <PropertyColumn Property="standings => standings.Name" />
    <PropertyColumn Property="standings => standings.Wins" Align="Align.Center" />
    <PropertyColumn Property="standings => standings.Losses" Align="Align.Center" />
    <PropertyColumn Property="standings => standings.Ties" Align="Align.Center" /> 
    @if (ShowOvertimeLosses)
    {
        <PropertyColumn Property="standings => standings.OvertimeLosses" Align="Align.Center" Title="OT Losses" />
    }
    <PropertyColumn Property="standings => standings.Percentage" Format=".000" Align="Align.Center" Title="Pct" />
    <PropertyColumn Property="standings => standings.GB" Align="Align.Center" />
    <PropertyColumn Property="standings => standings.RunsScored" Align="Align.Center" />
    <PropertyColumn Property="standings => standings.RunsAgainst" Align="Align.Center" />
    <PropertyColumn Property="standings => standings.Forfeits" Align="Align.Center" />
</QuickGrid>
</div>

@code {
    // [injection]
    // public Data.DemoContext DB { get; set; } = default!;

    [Parameter]
    public string Organization { get; set; } = "";

    [Parameter]
    public string Id { get; set; } = "";

    bool ShowOvertimeLosses;

    private IQueryable<BlazorSbt.Shared.Standings>? Standings;

    protected override void OnInitialized()
    {
        // note - "using" does not work with dependency injection for this method.
        // docs (see link) show it being used in other methods:
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/blazor-ef-core?view=aspnetcore-8.0#database-access

        //using var context = DbFactory.CreateDbContext();
        var context = DbFactory.CreateDbContext();

        this.Standings = context.Divisions
            .Include(d => d.Standings)
            .Where(d => d.Organization.ToLower() == this.Organization.ToLower()
                && d.Abbreviation.ToLower() == this.Id.ToLower())
            .SelectMany(d => d.Standings)
            .AsQueryable();

        //this.Standings = context.Standings.Where(s => s.Organization == Organization && s.Division == Id);//.AsQueryable();
    
        ShowOvertimeLosses = Organization?.ToLower().Contains("hockey") ?? false;
    }
}
