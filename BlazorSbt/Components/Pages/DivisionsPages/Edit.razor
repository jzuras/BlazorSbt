@page "/Divisions/edit"
@inject BlazorSbt.Data.DemoContext DB
@using BlazorSbt
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Divisions</h4>
<hr />
@if (Divisions is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Divisions" OnValidSubmit="UpdateDivisions" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Divisions.Organization" value="@Divisions.Organization" />
                <div class="mb-3">
                    <label for="league" class="form-label">League:</label>
                    <InputText id="league" @bind-Value="Divisions.League" class="form-control" />
                    <ValidationMessage For="() => Divisions.League" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="division" class="form-label">Division:</label>
                    <InputText id="division" @bind-Value="Divisions.Division" class="form-control" />
                    <ValidationMessage For="() => Divisions.Division" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updated" class="form-label">Updated:</label>
                    <InputDate id="updated" @bind-Value="Divisions.Updated" class="form-control" />
                    <ValidationMessage For="() => Divisions.Updated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="locked" class="form-label">Locked:</label>
                    <InputCheckbox id="locked" @bind-Value="Divisions.Locked" class="form-check-input" />
                    <ValidationMessage For="() => Divisions.Locked" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/divisions">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public string Organization { get; set; }

    [SupplyParameterFromForm]
    public Divisions? Divisions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Divisions ??= await DB.Divisions.FirstOrDefaultAsync(m => m.Organization == Organization);

        if (Divisions is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateDivisions()
    {
        DB.Attach(Divisions!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DivisionsExists(Divisions!.Organization))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/divisions");
    }

    bool DivisionsExists(string organization)
    {
        return DB.Divisions.Any(e => e.Organization == organization);
    }
}
